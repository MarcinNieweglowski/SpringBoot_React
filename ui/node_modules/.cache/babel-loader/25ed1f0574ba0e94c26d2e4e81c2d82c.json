{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { uiActions } from \"../store/ui-slice\";\nimport { NotificationStatus } from \"../store/NotificationStatus\";\nexport const STORAGE_KEY = \"product_app_jwt_token\";\nexport const getTokenFromStorage = () => {\n  _s();\n  const token = localStorage.getItem(STORAGE_KEY);\n  if (token === null) {\n    const history = useHistory();\n    history.replace(\"/login\");\n    return \"\";\n  }\n  return token;\n};\n_s(getTokenFromStorage, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\nconst redirectAndSendUiNotification = () => {\n  _s2();\n  const dispatch = useDispatch();\n  dispatch(uiActions.showNotification({\n    status: NotificationStatus.ERROR,\n    title: 'Authorization token not found',\n    message: 'You must log in to perform the action'\n  }));\n  const history = useHistory();\n  history.replace(\"/login\");\n};\n_s2(redirectAndSendUiNotification, \"FxNkVwM1QRg2/kU3+RDi4ll7EAM=\", false, function () {\n  return [useDispatch, useHistory];\n});","map":{"version":3,"names":["useHistory","useDispatch","uiActions","NotificationStatus","STORAGE_KEY","getTokenFromStorage","token","localStorage","getItem","history","replace","redirectAndSendUiNotification","dispatch","showNotification","status","ERROR","title","message"],"sources":["C:/Workspace/Java_Test/springboot-react-test/ui/src/utils/auth.tsx"],"sourcesContent":["import {useHistory} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {uiActions} from \"../store/ui-slice\";\r\nimport {NotificationStatus} from \"../store/NotificationStatus\";\r\n\r\nexport const STORAGE_KEY = \"product_app_jwt_token\";\r\n\r\nexport const getTokenFromStorage = (): string => {\r\n  const token = localStorage.getItem(STORAGE_KEY);\r\n\r\n  if (token === null) {\r\n    const history = useHistory();\r\n    history.replace(\"/login\");\r\n    return \"\";\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nconst redirectAndSendUiNotification = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  dispatch(\r\n    uiActions.showNotification({\r\n      status: NotificationStatus.ERROR,\r\n      title: 'Authorization token not found',\r\n      message: 'You must log in to perform the action'\r\n    })\r\n  );\r\n\r\n  const history = useHistory();\r\n  history.replace(\"/login\");\r\n}"],"mappings":";;AAAA,SAAQA,UAAU,QAAO,kBAAkB;AAC3C,SAAQC,WAAW,QAAO,aAAa;AACvC,SAAQC,SAAS,QAAO,mBAAmB;AAC3C,SAAQC,kBAAkB,QAAO,6BAA6B;AAE9D,OAAO,MAAMC,WAAW,GAAG,uBAAuB;AAElD,OAAO,MAAMC,mBAAmB,GAAG,MAAc;EAAA;EAC/C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACJ,WAAW,CAAC;EAE/C,IAAIE,KAAK,KAAK,IAAI,EAAE;IAClB,MAAMG,OAAO,GAAGT,UAAU,EAAE;IAC5BS,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC;IACzB,OAAO,EAAE;EACX;EAEA,OAAOJ,KAAK;AACd,CAAC;AAAA,GAVYD,mBAAmB;EAAA,QAIZL,UAAU;AAAA;AAQ9B,MAAMW,6BAA6B,GAAG,MAAM;EAAA;EAC1C,MAAMC,QAAQ,GAAGX,WAAW,EAAE;EAE9BW,QAAQ,CACNV,SAAS,CAACW,gBAAgB,CAAC;IACzBC,MAAM,EAAEX,kBAAkB,CAACY,KAAK;IAChCC,KAAK,EAAE,+BAA+B;IACtCC,OAAO,EAAE;EACX,CAAC,CAAC,CACH;EAED,MAAMR,OAAO,GAAGT,UAAU,EAAE;EAC5BS,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC;AAC3B,CAAC;AAAA,IAbKC,6BAA6B;EAAA,QAChBV,WAAW,EAUZD,UAAU;AAAA"},"metadata":{},"sourceType":"module"}