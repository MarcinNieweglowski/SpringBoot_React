{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  products: [],\n  totalPrice: 0\n};\nconst productSlice = createSlice({\n  name: 'product',\n  initialState: initialState,\n  reducers: {\n    populateProductList(state, action) {\n      state.products = action.payload.products;\n      state.totalPrice = action.payload.totalPrice;\n    },\n    addProduct(state, action) {\n      const product = action.payload;\n      const existingProduct = state.products.find(existingProduct => existingProduct.id === product.id);\n      if (existingProduct) {\n        console.log('Found an already existing product with given name');\n        return;\n      }\n      state.totalPrice = state.totalPrice + product.price;\n      const products = state.products;\n      products.push(product);\n      state.products = products;\n    },\n    removeProduct(state, action) {\n      const productToBeRemoved = action.payload;\n      const existingProduct = state.products.find(existingProduct => existingProduct.id === productToBeRemoved.id);\n      state.totalPrice = state.totalPrice - productToBeRemoved.price;\n      if (existingProduct.quantity > 1) {\n        existingProduct.quantity--;\n      } else {\n        state.products = state.products.filter(existingProduct => existingProduct.id !== productToBeRemoved.id);\n      }\n    },\n    editProduct(state, action) {\n      const updatedProduct = action.payload;\n      let existingProduct = state.products.find(existingProduct => existingProduct.id === updatedProduct.id);\n      if (!existingProduct) {\n        return;\n      }\n      existingProduct.price = updatedProduct.price;\n      existingProduct.quantity = updatedProduct.quantity;\n      const updatedPrice = state.products.map(p => p.quantity * p.price).reduce((previous, current) => previous + current, 0);\n      state.totalPrice = updatedPrice;\n    },\n    deleteProduct(state, action) {\n      const productToBeRemoved = action.payload;\n      state.products = state.products.filter(existingProduct => existingProduct.id !== productToBeRemoved.id);\n    }\n  }\n});\nexport const productActions = productSlice.actions;\nexport default productSlice;","map":{"version":3,"names":["createSlice","initialState","products","totalPrice","productSlice","name","reducers","populateProductList","state","action","payload","addProduct","product","existingProduct","find","id","console","log","price","push","removeProduct","productToBeRemoved","quantity","filter","editProduct","updatedProduct","updatedPrice","map","p","reduce","previous","current","deleteProduct","productActions","actions"],"sources":["C:/Workspace/Java_Test/springboot-react-test/ui/src/store/product-slice.tsx"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {Product} from \"../types/Product\";\r\nimport {OperationType} from \"../types/OperationType\";\r\n\r\nexport type InitialProductState = {\r\n  products: Product[],\r\n  totalPrice: number\r\n}\r\n\r\nconst initialState = {\r\n  products: [],\r\n  totalPrice: 0\r\n} as InitialProductState;\r\n\r\nconst productSlice = createSlice({\r\n  name: 'product',\r\n  initialState: initialState,\r\n  reducers: {\r\n    populateProductList(state, action) {\r\n      state.products = action.payload.products;\r\n      state.totalPrice = action.payload.totalPrice;\r\n    },\r\n    addProduct(state, action) {\r\n      const product: Product = action.payload;\r\n      const existingProduct = state.products.find(existingProduct => existingProduct.id === product.id);\r\n      if (existingProduct) {\r\n        console.log('Found an already existing product with given name');\r\n        return;\r\n      }\r\n\r\n      state.totalPrice = state.totalPrice + product.price;\r\n      const products: Array<Product> = state.products;\r\n      products.push(product);\r\n      state.products = products;\r\n    },\r\n    removeProduct(state, action) {\r\n      const productToBeRemoved: Product = action.payload;\r\n      const existingProduct = state.products.find(existingProduct => existingProduct.id === productToBeRemoved.id) as Product;\r\n\r\n      state.totalPrice = state.totalPrice - productToBeRemoved.price;\r\n\r\n      if (existingProduct.quantity > 1) {\r\n        existingProduct.quantity--;\r\n      } else {\r\n        state.products = state.products.filter(existingProduct => existingProduct.id !== productToBeRemoved.id);\r\n      }\r\n    },\r\n    editProduct(state, action) {\r\n      const updatedProduct: Product = action.payload;\r\n      let existingProduct = state.products.find(existingProduct => existingProduct.id === updatedProduct.id);\r\n\r\n      if (!existingProduct) {\r\n        return;\r\n      }\r\n\r\n      existingProduct.price = updatedProduct.price;\r\n      existingProduct.quantity = updatedProduct.quantity;\r\n\r\n      const updatedPrice = state.products\r\n        .map(p => p.quantity * p.price)\r\n        .reduce((previous, current) => previous + current, 0);\r\n\r\n      state.totalPrice = updatedPrice;\r\n    },\r\n    deleteProduct(state, action) {\r\n      const productToBeRemoved: Product = action.payload;\r\n      state.products = state.products.filter(existingProduct => existingProduct.id !== productToBeRemoved.id);\r\n    }\r\n  }\r\n});\r\n\r\nexport const productActions = productSlice.actions;\r\n\r\nexport default productSlice;"],"mappings":"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"},"metadata":{},"sourceType":"module"}